<library>
    <import id="GrL" importmode="">/res/fh-hannover/sprengel/Informatik/TheoretischeInformatik/Libraries/grammar.library</import>
<script type="loncapa/perl">
#use 5.010;
#use strict;
#use warnings;
#use grammar;
#use MIME::Base64;

# shouldn't be declared as "my"
# $bestlanguage = scalar(&languages(['de','en']));
$bestlanguage = "de";

# delivers examplewords for a given regex / grammar

sub giveExampleWords{
     my $given = shift;
     return grammar::examplewords($given);
}

sub buildImageFromSVG{
    my $given = shift;
    my $encoded = encode_base64($given);
    my $img = "<img src=\"data:image/svg+xml;base64," . $encoded . "\" alt=\"Automaton or Machine\" style=\"max-width:100%\"/>";
    return $img;
}


# delivers Url and Input for the JFlap Call
sub jflapUrlInput{

  (my $mode, my $given, my $type, my $tasktitle, my $numberOfWords, my $maxlength, my $testWords) = @_;

  if (!(defined $maxlength)) { $maxlength = 10; }
  if (!(defined $numberOfWords)) { $numberOfWords = 10; }
  if (!(defined $tasktitle)) {
       if ($bestlanguage eq "de"){
          $tasktitle = "JFlap-Aufgabe";
        } else {
          $tasktitle = "JFlap Task";
        }
  }
  if (!(defined $testWords)) { $testWords = "-"; }
#  $tasktitle =~ s/ü/ue/g;
#  $tasktitle =~ s/ä/ae/g;
#  $tasktitle =~ s/ö/oe/g;
#  $tasktitle =~ s/Ä/Ae/g;
#  $tasktitle =~ s/Ö/oe/g;
#  $tasktitle =~ s/Ü/Ue/g;
#  $tasktitle =~ s/ß/ss/g;


  if (!(defined $type)){ $type = "non"; }
  if (!(defined $given)){ $given = "non"; }

  my $error = "";

  my @allowedModes;
  my @exampleModes = ('eat','egt');
  my @jflapWordModes = ('aa', 'ar','ag','art','agt','arp','agp','artp','agtp','gg','ggt','gr','grt');
  my @lcWordModes = ('arw','agw','ggw','artw','agtw','arwp','agwp','artwp','agtwp','ggtw','grw','grtw','rrw');
  my @machineModes = ('mp', 'mmw');
  my @automatonModes = ('aa','ar','ag','art','agt','eat','arw','agw','artw','agtw','arp','agp','artp','agtp','arwp','agwp','artwp','agtwp');
  my @grammarModes = ('egt','gg','ggt','ggw','ggtw','gr','grt','grw','grtw','rr','rrw');
  my @wordModes = ('ww',"wint");
  my @algorithmModes = ('cyk', 'der');
  # collect all in @allowedModes
  push(@allowedModes, @exampleModes);
  push(@allowedModes, @jflapWordModes);
  push(@allowedModes, @lcWordModes);
  push(@allowedModes, @wordModes);
  push(@allowedModes, @machineModes);
  push(@allowedModes, @algorithmModes);

  my @allowedTypes;
  my @aTypes = ('fa','dfa','nfa','non','pda','dpda','npda','tm','dtm','ntm','tmww');
  my @mTypes = ('tm', 'dtm', 'ntm', 'mealy', 'moore');
  my @gTypes = ('rl', 'rlcfg', 'cfg', 'ncfg', 'non', 'gint');
  # collect all in @allowedTypes
  push (@allowedTypes,@aTypes);
  push (@allowedTypes,@gTypes);
  push (@allowedTypes,@mTypes);

  my $modesallowed = grammar::concatenateWords(',',@allowedModes);
  my $typesallowed = grammar::concatenateWords(',',@allowedTypes);


  # check if $mode is allowed
  if (!($mode ~~ @allowedModes))
   {
     # mode is not allowed

      if ($bestlanguage eq "de"){
         $error .= "Falscher Modus. Bitte benutzen Sie einen Modus aus { $modesallowed }. ";
       }else{
         $error .= "Wrong mode. Please use one of  { $modesallowed }. ";
        }
   }

   # check if $type is allowed
  if (!($type ~~ @allowedTypes))
   {
     # type is not allowed
      if ($bestlanguage eq "de"){
         $error .= "Falscher Typ. Bitte benutzen Sie einen Typ aus { $typesallowed }. ";
       }else{
         $error .= "Wrong type. Please use one of  { $typesallowed }. ";
        }
   }

 #check if type matches mode
 if ($mode ~~ @automatonModes){
    if (!($type ~~ @aTypes))
    {
      if ($bestlanguage eq "de"){
         $error .= "Falscher Typ für eine Automatenaufgabe. ";
         $error .= "Bitte benutzen Sie einen Typ aus {" . grammar::concatenateWords(',',@aTypes) . "} . ";
       }else{
         $error .= "Wrong type for an automata exercise. Please use one of { " . grammar::concatenateWords(',',@aTypes) . " }. ";
        }
    }
 }
 if ($mode ~~ @machineModes){
    if (!($type ~~ @mTypes))
    {
      if ($bestlanguage eq "de"){
         $error .= "Falscher Typ für eine Automatenaufgabe. ";
         $error .= "Bitte benutzen Sie einen Typ aus {" . grammar::concatenateWords(',',@aTypes) . "} . ";
       }else{
         $error .= "Wrong type for an automata exercise. Please use one of { " . grammar::concatenateWords(',',@aTypes) . " }. ";
        }
    }
 }
 if ($mode ~~ @grammarModes){
    if (!($type ~~ @gTypes))
    {
      if ($bestlanguage eq "de"){
         $error .= "Falscher Typ für eine Grammatikaufgabe. ";
         $error .= "Bitte benutzen Sie einen Typ aus { " . grammar::concatenateWords(',',@gTypes) . " }.";
       }else{
         $error .= "Wrong type for an automata exercise. Please use one of { " . grammar::concatenateWords(',',@gTypes) . " }. ";
        }
    }
 }

  my $url = "http://proanvil.inform.hs-hannover.de/frauke/cgi-bin/jflap_call.pl";
#  my $url = "http://141.71.38.34/frauke/cgi-bin/jflap_call2016.pl";
  my $input = $tasktitle.'#'.$bestlanguage.'#'.$given.'#'.$mode.'#';

   if ($type eq 'tmww'){
      $type = 'ntm';
      @splitwords = split(/!/, $testWords);
      @rightWords = split(/%/, $splitwords[0]);
      @wrongWords = split(/%/, $splitwords[1]);
      $numberWords = @rightWords + @wrongWords;
      $input .= $type.'#'.$numberWords.'#'.$testWords;
   } elsif ($type eq 'gint'){
      $type = 'rl';
      @splitwords = split(/!/, $testWords);
      @rightWords = split(/%/, $splitwords[0]);
      @wrongWords = split(/%/, $splitwords[1]);
      $numberWords = @rightWords + @wrongWords;
      $input .= $type.'#'.$numberWords.'#'.$testWords;

} else {
  $input  .= $type.'#';

  if($mode ~~ @jflapWordModes || $mode ~~ @wordModes) {
     $input .= $numberOfWords.'#'.$testWords;
  } elsif ($mode ~~ @lcWordModes) {
        if($testwords eq "-"){
        my $wordsAcceptNotAccept = "";
           if (($mode eq "arw") || ($mode eq "artw") || ($mode eq "arwp") || ($mode eq "artwp") || ($mode eq "grw") || ($mode eq "grtw")|| ($mode eq "rrw") ){
           $wordsAcceptNotAccept = grammar::wordsFromRegEx($numberOfWords, $maxlength, $given);
         } else
         {  $wordsAcceptNotAccept = grammar::wordsFromGrammar($numberOfWords, $given);
         }
            @splitwords = split(/!/, $wordsAcceptNotAccept);
            if ($splitwords[0] eq ""){
             if ($bestlanguage eq "de"){
                  $error .= "Vorgegebene Grammatik/Regex produziert keine Terminalwörter. Bitte überprüfen! ";
                }else{
                  $error .= "Given grammar/regex does'nt produce terminal words. Please check grammar. ";
                }
            }
            if ($splitwords[1] eq ""){
             if ($bestlanguage eq "de"){
                 $error .= "Zur vorgegebenen Grammatik/Regex wurden keine falschen Terminalwörter gefunden. Bitte überprüfen! ";
                }else{
                  $error .= "For given grammar/regex no wrong terminal words were produced. Please check. ";
                }
            }
          @rightWords = split(/%/, $splitwords[0]);
          @wrongWords = split(/%/, $splitwords[1]);
          $numberWords = @rightWords + @wrongWords;
          $input .= $numberWords.'#'.$wordsAcceptNotAccept;
        }else{
        $input .= $numberOfWords.'#'.$testWords;
        }
  } elsif ( $mode ~~ @exampleModes ) {
       $input .= '0#'.$testWords;
  } elsif ($mode ~~ @machineModes || $mode ~~ @algorithmModes) {
    $input .= $numberOfWords.'#'. $testWords;
  } else {
    $input .= $numberOfWords.'#'. $testWords;
  }
}

  return ($url,$input,$error);
}

    # ----------------------------------------------------------------
    # At the top, create an expandable list (accordion) which shows the
    # results from the previous submissions
    # ----------------------------------------------------------------

sub listOfSubmissions {
        my $partid = shift;
        my $responseid = shift;

        my $langSubm;
        my $langFiles;
        my $langYourSubm;
        my $langEnter;

        #--- Choose text based on the browser's language preferences ---
        if ($bestlanguage eq "de") {
            $langSubm = "Einreichung";
            $langFiles = "Ihre Antwort";
            $langYourSubm = "Ihre Einreichungen";
        } else { # default
            $langSubm = "Submission";
            $langFiles = "Your Answer";
            $langYourSubm = "Your submissions";
        }

        #--- Compile output data using actual student's submission data ---
        my $text;
        my $code = "";
        my $num = 1;
        while (&EXT('user.resource.'.$num.':resource.'.$partid.'.'.$responseid.'.submission')) {
            $text .= '<div class="accordion"><h3>'.$langSubm.' '.$num.'</h3>';
            $text .= '<span>'.&EXT('user.resource.'.$num.':resource.'.$partid.'.'.$responseid.'.message');
          #  $text .= '<h3>'.$langFiles.'</h3>';
          #  $code .= &EXT('user.resource.'.$num.':resource.'.$partid.'.'.$responseid.'.submission');
          #  $code =~ s/\&/&amp;/g;
          #  $code =~ s/</&lt;/g;
          #  $code =~ s/>/&gt;/g;
          #  $code =~ s/\"/&quot;/g;
          #  $code = "<pre>" . $code . "</pre>";
          #  $text .= '<span class="submittedFiles">'.$code.'</span>';
            $text .= '</span></div>';
            $num ++;
        }

        if ($text) {
            $text =
                '<p>'.$langYourSubm.':<br />'
               .$text
               .'</p>';
        }

         if (!$text) {$text=''};

        return $text;
    }
</script>


</library>

