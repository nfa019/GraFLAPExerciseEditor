<library>
   <import id="rx" importmode=""> /res/fhwf/riegler/Informatik/TheoretischeInformatik/regex.library</import>
<script type="loncapa/perl">
#use 5.014;
#use strict;
#use warnings;
#use regex;
package grammar;

# E, € = empty string
# capital letters = variables
# small letters or 0,1 = terminal symbols

# separate the rules of a grammar
sub getRulesFromGrammar {
    my $grammar = shift;
        $grammar =~ s/\n|\r//g; # remove new lines
    #remove empty spaces
    $grammar =~ s/\s+//g;
    #getting the  single rules
    my @rules = split(/,/, $grammar);
    #check whether we have real rules
    my $checkrules = 1;
    foreach (@rules) {
        $checkrules = $checkrules && ($_ =~ /->/) ;
        $_ =~ s/E/€/g;
        # empty string
     }
    #make rules with single rhs
    foreach (@rules) {
        if ($_ =~ /\|/) {
            my @splitrule = split(/\|/, $_);
            $_ = $splitrule[0];
            my @splitsides = split(/->/, $_);
            my $lhs = $splitsides[0]."->";
            for (my $i=1; $i<=$#splitrule; $i++){
                $rules[$#rules+1] = $lhs . $splitrule[$i];
            }
        }
    }
    return @rules;
}

# get the right-hand side of a rule
sub getRhs{
    my $rule = shift;
    my @splitsides = split(/->/, $rule);
    my $rhs = $splitsides[1];
    return $rhs;
}

# get the rules which construct only terminals
sub getTerminalRules {
    my @origrules = @_;
    my @terrules; my $i = 0;
    foreach (@origrules){
        my $rhs = getRhs($_);
        if ( ! ( $rhs =~ m/[A-Z]/ ) ) {
            $terrules[$i] = $_;
            $i++;
            }
    }
    return @terrules;
}


# true if only terminals
sub isTerminal {
    my $word = shift;
    my $bool = ! ( $word =~ m/[A-Z]/ ) ;
    return $bool;
}


# get the rules contructing non-terminals again
sub getNonTerminalRules {
    my @origrules = @_;
    my @terrules; my $i = 0;
    foreach (@origrules){
        my $rhs = getRhs($_);
        if (  ( $rhs =~ m/[A-Z]/ ) ) {
            $terrules[$i] = $_;
            $i++;
            }
    }
    return @terrules;
}

# get the rules with a given variable on the left-hand side
sub getRulesVar {
    my $var = shift;
    my @origrules = @_;
    my @varrules; my $i = 0;
    foreach (@origrules){
        my @splitsides = split(/->/, $_);
        my $lhs = $splitsides[0];
        if (  ( $lhs =~ m/$var/ ) ) {
            $varrules[$i] = $_;
            $i++;
            }
    }
    return @varrules;
}

#adds a word to a list (only if it is new)
sub addWord{
    my $word = shift;
    my @list = @_;
    my $inList = 0;
    #remove empty words
    if (( $word =~ m/€/ )) {$word =~ s/€//g; }
    foreach (@list) { if ($word eq $_) { $inList=1; last;} }
    if (!$inList) {
        $list[$#list+1] = $word;
        }
    return @list;
}

# makes a random word of length $newl from given letters
sub randomWord{
    my $newl = shift;
    my @letters = @_;
    my $newword ="";
        for (my $i=1; $i<=$newl; $i++){
         $newword .= $letters[&main::random(0,$#letters,1)];
        }
    return $newword;
}



# makes Words from a given context-free gramar
sub makeWordsFromGrammar {
    my $number = shift;
    my $grammar = shift;
    my $tries = 10000;
    my @rules = getRulesFromGrammar($grammar);
    my @terrules = getTerminalRules(@rules);
    my @nonterrules = getNonTerminalRules(@rules);
    my @startterrules = getRulesVar("S",@terrules);
    my @startnonterrules = getRulesVar("S",@nonterrules);
    my @words;
    my @derived;
    foreach (@startterrules) {
        @words = addWord(getRhs($_),@words);
        $tries--;
        }
    foreach(@startnonterrules){
        @derived  = addWord(getRhs($_), @derived);
        }
    Break: foreach my $oldword (@derived){
        if (($#words > $number) || ($tries <0)){ last Break; }
        # find all variables in $_
        my @vars = ($oldword =~ m/[A-Z]/g);
        foreach my $variable (@vars){
            # count matches of variable
            my @matches = ($oldword =~ /$variable/g );
            my $count = scalar @matches;
            my @varrules = getRulesVar($variable,@rules);
            for (my $i=1; $i <= $count; $i++){
                foreach (@varrules){
                    my $rhs = getRhs($_);
                    my $newword = $oldword;
                    my $nrmatch = $i;
                    # replace the i-th match
                    $newword =~ s/$variable/--$nrmatch == 0 ? $rhs:$variable/ge;
                    if ( isTerminal($newword) ) { @words = addWord($newword,@words); }
                    else { @derived  = addWord($newword, @derived); }
                    $tries--;
                    }
                }
            }

        }
        # say 10000-$tries;
    # sort by length
    @words = sort { length($a) <=> length($b) } @words;
    return @words;
}

# makes words not included in the language of a given context-free grammar (given a list of words)
sub makeOtherWordsFromGrammar{
    my $grammar = shift;
    my @words = @_;
    my @otherwords;
    my @letters;
    my $maxcount =  2* $#words;
    my $maxlength = length($words[-1]);
    # find max length of given words
    # extract terminals from grammar
    $grammar =~ s/-|>|,|\||[A-Z]|\s+//g;
    while($grammar =~/(.)/g){
        my $let = $1;
        if (! ("@letters" =~/$let/)) { $letters[$#letters+1] = $let; }
        }
    if (!("@words" =~ /E/)) {
        $otherwords[0] = "";
        }
    my $newl=1;
    my $levelct=$#letters+1;
    my $lev=1;
    while ( ($#otherwords+1 < $maxcount) && $newl < $maxlength ){
        my $newword = randomWord($newl, @letters);
        my $inList = 0;
        foreach (@words) { if ($newword eq $_) { $inList=1; last;} }

        if (!$inList){ @otherwords = addWord($newword,@otherwords);}
        $lev++;
        if($lev > $levelct) {
            $newl++;
            $levelct *= $#letters+1;
            $lev=1;
            }
        }
    # sort by length
    @otherwords = sort { length($a) <=> length($b) } @otherwords;
    return @otherwords;
}

# makes words from a given regex
sub makeWordsFromRegEx{
    my $maxcount = shift;
    my $stringlength = shift;
    my $givenregex = shift;

        #$stringlength = 1;
    my @words = &RegEx::LanguageSampling($givenregex, $stringlength, $maxcount);
    # sort by length
   @words = sort { length($a) <=> length($b) } @words;
    return @words;


}


# makes words not matching a given regex
sub makeOtherWordsFromRegEx{
    my $maxcount = shift;
    my $stringlength = shift;
    my $givenregex = shift;
    my @list;
    my @letters;
    my $alph =$givenregex;
    $alph =~ s/\(|\)|\||\+|\*//g;
    while($alph =~/(.)/g){
        my $let = $1;
        if (! ("@letters" =~/$let/)) { $letters[$#letters+1] = $let; }
        }
    while (scalar(@list) < $maxcount){
        my $len = &main::random(0,$stringlength,1);
        my $newword = randomWord($len,@letters);
        if (!($newword=~ m/^($givenregex)$/)){
            @list = addWord($newword,@list);
            }
        }
    # sort by length
    @list = sort { length($a) <=> length($b) } @list;
    return @list;
}

# concatenates strings to a looong single string, uses a given token between words
sub concatenateWords{
    my $token = shift;
    my @wordlist = @_;
    my $longword = "";
    foreach my $word (@wordlist){
        $longword = $longword  . $token . $word;
        }
    $longword = substr $longword , 1;

        return $longword;
}

# delivers $number words / 2* $number other words for a grammar in one string, words separated by %
# words separated by - from other words
sub wordsFromGrammar{
    my $number = shift;
    my $grammar = shift;
    my @words = makeWordsFromGrammar($number, $grammar);
    my @owords = makeOtherWordsFromGrammar($grammar,@words);
    my $longword = concatenateWords("%",@words) . "!" . concatenateWords("%",@owords);

        return $longword;
}

# delivers $number words /  $number other words for a regex in one string, words separated by %
# words separated by - from other words
sub wordsFromRegEx{
    my $number = shift;
    my $maxlength = shift;
    my $regex = shift;
    my @words = makeWordsFromRegEx($number, $maxlength, $regex);
    my @owords = makeOtherWordsFromRegEx(3*$number, $maxlength, $regex);
    my $longword = concatenateWords("%",@words) . "!" . concatenateWords("%",@owords);

        return $longword;
}

sub examplewordsFromRegex{
        my $regex = shift;
    my $number = shift;
    my $maxlength = 10;
    my @words = makeWordsFromRegEx($number, $maxlength, $regex);
    my $longword = concatenateWords(",",@words);

        return $longword;
}

sub examplewordsFromGrammar{
    my $grammar = shift;
    my $number = shift;
    my @words = makeWordsFromGrammar($number, $grammar);
    my $longword = concatenateWords(",",@words) ;
        $longword =~ s/E,//;

        return $longword;
}

sub examplewords{
        my $given = shift;
        my $exwords;
        my $number = 8;
        if ($given =~ /->/) {
            $exwords = examplewordsFromGrammar($given,$number); }
        else {
            $exwords = examplewordsFromRegex($given,$number); }

        return $exwords;

}

# a module should return a true value
1;
</script>
</library>
