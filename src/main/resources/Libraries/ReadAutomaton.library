<library>
<import id="CP" importmode=""> /res/fh-hannover/sprengel/Informatik/TheoretischeInformatik/Libraries/ComponentParse.library</import>
<script type="loncapa/perl">
#use 5.014;
#use strict;
#use warnings;
package ReadAutomaton;

#adds a word to a list (only if it is new)
sub addWord{
    my $word = shift;
    my @list = @_;
    my $inList = 0;
    #remove empty words
    if (( $word =~ m/€/ )) {$word =~ s/€//g; }
    foreach (@list) { if ($word eq $_) { $inList=1; last;} }
    if (!$inList) {
        $list[$#list+1] = $word;
        }
    @list = sort  (@list);
    return @list;
}

#adds a word to a list (only if it is new)
sub addWordStack{
    my $word = shift;
    my @list = @_;
        my $len = length($word);
        for (my $i=0; $i < $len; $i++){
           my $character = substr($word, $i, 1);
           @list = addWord($character, @list);
            }
    return @list;
}

#make a string from a list of strings
sub listToString{
    my @list = @_;
    my $string = "";
    foreach (@list){
        $string .= $_ . ",";
    }
    chop($string);
    return $string;
}

sub buildTex {
    my $typeOfAutomaton = $_[0];
    my $epsauto = $_[1];
    my @states = @{$_[2]};
    my @alphabet = @{$_[3]};
    my @transitions = @{$_[4]};
    my @texTransitions = @{$_[5]};
    my @fktTransitions = @{$_[6]};

    my @components;
    # default: non-deterministic
    $components[0] = "nd";

    #TexOutput
    my $deterministic;
    if ($typeOfAutomaton eq "pda") {
        $components[1] = "<m>\\[ " . listToString(@texTransitions) . "\\] </m>";
        $components[1] =~ s/Z/\\perp/g;
    } else {
            # finite automaton
        if ($epsauto){
            $alphabet[++$#alphabet] = "E";
            $deterministic = 0;
            }else{
            $deterministic = 1;
        }

        my $numSt = $#states + 1;
        my $numLt = $#alphabet + 1;
        # initialize table of transitions
        my @table;
        for (my $i=0; $i < $numLt; $i++){
            for (my $j=0; $j < $numSt; $j++){
                @table[$numSt*$i+$j] ="-";
                }
            }

        foreach my $trans (@transitions){
            chop($trans);
            $trans = substr($trans,1);
            my @trlist = split(",",$trans);
            my $i = 0;
            my $indexState;
            foreach my $st (@states){
                if ($st eq $trlist[0]){
                    $indexState = $i;
                    last;
                    }
                $i++;
                }
            my $indexLetter;
            $i=0;
            foreach my $lt (@alphabet){
                if ($lt eq $trlist[1]){
                    $indexLetter = $i;
                    last;
                    }
                $i++;
                }
            if ($table[$numSt*$indexLetter+$indexState] eq "-"){
                $table[$numSt*$indexLetter+$indexState] = $trlist[2];
                }else{
                $table[$numSt*$indexLetter+$indexState] .= ",".$trlist[2];
                $deterministic = 0;
                }
            }
        # make tex table of transitions
        my $delta = "";
        if ($deterministic){
            $delta = "\\delta";
            $components[0] = "d";
            $components[1] = "<m>\\[ " . listToString(@fktTransitions) . "\\] </m> \n";
            }else{
            $delta = "\\Delta";
            $components[1] = "<m>\\[ " . listToString(@texTransitions) . "\\] </m>\n";
            foreach my $ta (@table){
                if ($ta =~/,/){ $ta = "\\{". $ta . "\\}"; }
                }
            }
        $components[1] .= "<p/>Als Tabelle:\n";
        my $textable = "<m>\\[ \\begin{array}{c|";
        foreach (my $i = 0; $i < $numSt; $i++){ $textable .= "c" ; }
        $textable .= "} \n ". $delta ;
        foreach (@states) { $textable .= " & " . $_ ; }
        $textable .= " \\\\\\\\ \\hline ";
        my $i=0;
        foreach my $lt (@alphabet){
            $textable .= "\n " . $lt ;
            foreach (my $j = 0; $j < $numSt; $j++){
                $textable .= " & " . $table[$numSt*$i+$j] ;
                }
            $i++;
            $textable .= " \\\\\\\\";
            }
        $textable .= "\n \\end{array} \\] </m>";
        $components[1] .= $textable;
    }

    $components[1] =~ s/E/\\varepsilon/g;
    return @components;
}

# Read finite or push-down jff automaton from a jff string, give back a
# list of components
sub readJFFAutomaton {
    my $jffString = shift;

    my $typeOfAutomaton="";
    my @automaton;

    $jffString =~ s/\n|\r//g; # remove new lines

    # read type of automaton (pda or fa - finite automaton)
    if($jffString =~/(<type.*?\/type>)/g){
        $typeOfAutomaton=substr($1, 6, length($1)-13);
        }


    if (($typeOfAutomaton eq "pda") || ($typeOfAutomaton eq "fa")){
        $automaton[0] = $typeOfAutomaton;
        my @jffstates;
        my @states;
        my @alphabet;
        my @stackalphabet;
        my @initials;
        my @finals;
        my @transitions;
        my @texTransitions;
        my @fktTransitions;
        my $epsauto=0;

        # find all states, all initial and final states
        while($jffString =~/(<state id.*?\/state>)/g){
            my $stateString = $1;
            my $numberState;
            my $nameState;
            if($stateString =~/(id=\".*?\")/g){
                $numberState = substr($1, 4, length($1)-5);
                }
            if($stateString =~/(name=\".*?\")/g){
                $nameState = substr($1, 6, length($1)-7);
                }
            $jffstates[++$#jffstates] = $numberState;
            $states[++$#states] = $nameState;
            if ($stateString =~/(initial)/g){ $initials[++$#initials] = $nameState; }
            if ($stateString =~/(final)/g){ $finals[++$#finals] = $nameState; }
        }

        # find all transitions and the alphabet
        while($jffString =~/(<transition.*?\/transition>)/g){
            my $transString = $1;
            my $letter ="";
            my $fromState ="";
            my $toState ="";
            my $push = "";
            my $pop = "";
            if ($transString =~/(<from>.*?<\/from>)/g){
                $fromState = substr($1, 6, length($1)-13);
                }
            if ($transString =~/(<to>.*?<\/to>)/g){
                $toState = substr($1, 4, length($1)-9);
                }
            if ($transString =~/(<read>.*?<\/read>)/g){
                $letter = substr($1, 6, length($1)-13);
                @alphabet=addWord($letter,@alphabet);
                } elsif ($transString =~/(<read\/>)/g){
                    $letter = "E";
                    $epsauto = 1;
                }
            if ($typeOfAutomaton eq "pda"){
                $stackalphabet[0] = "Z";
                if ($transString =~/(<pop>.*?<\/pop>)/g){
                    $pop = substr($1, 5, length($1)-11);
                    @stackalphabet = addWord($pop,@stackalphabet);
                    } elsif ($transString =~/(<pop\/>)/g){
                        $pop = "E";
                    }
                if ($transString =~/(<push>.*?<\/push>)/g){
                    $push = substr($1, 6, length($1)-13);
                                        @stackalphabet = addWordStack($push, @stackalphabet);
                        } elsif ($transString =~/(<push\/>)/g){
                        $push = "E";
                    }
                $push = "," . $push;
                $pop = "," . $pop;
                }

            my $fromName = "";
            my $toName = "";
            my $i=0;
            foreach my $numState (@jffstates){
                if ($numState eq $fromState){ $fromName = $states[$i];}
                if ($numState eq $toState){ $toName = $states[$i];}
                $i++;
                }
            #say "(" . $fromName . ",". $letter . $pop . ",". $toName . $push .")";
            $transitions[++$#transitions] = "(" . $fromName . ",". $letter . $pop .",". $toName . $push .")";
            if ($typeOfAutomaton eq "pda"){
                $texTransitions[++$#texTransitions] = "\\ (" . $fromName . ",". $letter . $pop .") \\Delta (". $toName . $push .")";
                } else {
                $texTransitions[++$#texTransitions] = "\\ (" . $fromName . ",". $letter . ") \\Delta ". $toName ;
                $fktTransitions[++$#fktTransitions] = "\\ \\delta(" . $fromName . ",". $letter . ") = ". $toName ;
                }
            }


        $automaton[1] = listToString(@states);
        $automaton[2] = listToString(@alphabet);
        $automaton[3] = listToString(@stackalphabet);
        $automaton[4] = listToString(@transitions);
        $automaton[5] = listToString(@initials);
        $automaton[6] = listToString(@finals);

  

        push @automaton, buildTex($typeOfAutomaton, $epsauto, \@states,
                                  \@alphabet, \@transitions, \@texTransitions,
                                  \@fktTransitions);
    }
    return @automaton;

}

# Read finite or push-down jflap automaton from a jff string, give back a
# list of components
sub readJFLAPAutomaton {
    my $jffString = shift;
    my @data = split("\n", $jffString);

    my @automaton;
    # read type of automaton (pda or fa - finite automaton)
    my $typeOfAutomaton = ComponentParse::retrieve_automaton_type(\@data);


    if (($typeOfAutomaton eq "pda") || ($typeOfAutomaton eq "fsa")) {
        $automaton[0] = $typeOfAutomaton;
        my @jffstates;
        my @texTransitions;
        my @fktTransitions;
        my $epsauto=0;

        # find all states, all initial and final states
        my @states = ComponentParse::retrieve_states(\@data);
        my @initials = ComponentParse::retrieve_start_state(\@data);
        my @finals = ComponentParse::retrieve_final_states(\@data);

        # find all transitions and the alphabet
        my @alphabet = ComponentParse::retrieve_alphabet(\@data);
        my @transitions;
        my @stackalphabet;
        my @formal_transitions;
        if ($typeOfAutomaton eq "fsa") {
            @formal_transitions = ComponentParse::retrieve_fsa_transitions(\@data);
        } elsif ($typeOfAutomaton eq "pda") {
            @formal_transitions = ComponentParse::retrieve_pda_transitions(\@data);
            @stackalphabet = ComponentParse::retrieve_stack_alphabet(\@data);
        }
        foreach(@formal_transitions) {
            my @transition = @{$_};
            if ($transition[1] eq "E") {
                $epsauto = 1;
            }
            if ($typeOfAutomaton eq "pda") {
                $transitions[++$#transitions] = "(" . $transition[0] . ",". $transition[1] . "," . $transition[2] ."," . $transition[3] . ", " . $transition[4] .")";
                $texTransitions[++$#texTransitions] = "\\ (" . $transition[0] . ",". $transition[1] . "," . $transition[2] .") \\Delta (". $transition[3] . "," . $transition[4] .")";
            } else {
                $transitions[++$#transitions] = "(" . $transition[0] . ",". $transition[1] . "," . $transition[2] .")";
                $texTransitions[++$#texTransitions] = "\\ (" . $transition[0] . ",". $transition[1] . ") \\Delta ". $transition[2] ;
                $fktTransitions[++$#fktTransitions] = "\\ \\delta(" . $transition[0] . ",". $transition[1] . ") = ". $transition[2] ;
            }
        }

        $automaton[1] = listToString(@states);
        $automaton[2] = listToString(@alphabet);
        $automaton[3] = listToString(@stackalphabet);
        $automaton[4] = listToString(@transitions);
        $automaton[5] = listToString(@initials);
        $automaton[6] = listToString(@finals);

        push @automaton, buildTex($typeOfAutomaton, $epsauto, \@states,
                                  \@alphabet, \@transitions, \@texTransitions,
                                  \@fktTransitions);
    }
    return @automaton;

}

# a module should return a true value
1;
</script>
</library>


