<library>
<script type="loncapa/perl">
package TransducerFunction;
#use strict;
#use warnings;

sub new {
  my $class = shift;
  my $self = {
      _number_of_words => shift,
      _separator => shift,
      _word_pairs => {}
  };

  $self->{_number_of_words} = 25 if !defined($self->{_number_of_words});
  $self->{_separator} = '0' if !defined($self->{_separator});
  bless $self, $class;
  return $self;
}

sub get_number_of_words {
  my( $self ) = @_;
  return $self->{_number_of_words};
}

sub generate_test_words {
  my $self = shift;
  $self->_generate_special_case_test_words();

  while (scalar keys %{$self->{_word_pairs}} < $self->{_number_of_words}) {
    my $first = &main::random(0,$self->{_number_of_words},1);
    my $second = &main::random(0,$self->{_number_of_words},1);
    $self->_generate_test_word_pair($first, $second);
  }

  return $self->{_word_pairs};
}

sub generate_word_string {
  my $self = shift;
  my $input = "";

  my @keys = keys %{$self->{_word_pairs}};
  for my $i ( 0 .. scalar @keys - 2 ) {
    $input .= $keys[$i] . ';' . $self->{_word_pairs}{$keys[$i]} . '%';
  }
  $input .= $keys[scalar @keys - 1] . ';';
  $input .= $self->{_word_pairs}{$keys[scalar @keys - 1]};

  return $input;
}

sub _generate_test_word_pair {
  my $self = shift;
  my $first_argument = shift;
  my $second_argument = shift;

  my $input_conversion = $self->_apply_input_conversion($first_argument);
  $input_conversion .= $self->{_separator};
  $input_conversion .= $self->_apply_input_conversion($second_argument);
  my $result = $self->_apply_math_function($first_argument, $second_argument);

  $self->{_word_pairs}{$input_conversion} =
                       $self->_apply_input_conversion($result);
}

sub _generate_special_case_test_words {
  # optional for child classes, so no abstract method
}

sub get_automaton_solution_svg {
  die "Error: get_automaton_solution_svg is an abstract method with one ".
      " argument that should be implemented in a subclass";
}

sub _apply_math_function {
   die "Error: apply_math_function is an abstract method with two arguments ".
       " that should be implemented in a subclass";
}

sub _apply_input_conversion {
  die "Error: apply_math_function is an abstract method with one argument ".
      " that should be implemented in a subclass";
}

1;
</script>
</library>
